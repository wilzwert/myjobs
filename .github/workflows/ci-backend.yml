name: Backend CI - Tests and analysis
concurrency:
  group: ${{ github.ref }}.backend
  cancel-in-progress: true
on:
  # CI should be able to run manually
  # which will be interpreted as a push on main 
  workflow_dispatch:
  # CI should run on pull requests and push on main branch
  # some steps are executed only on pushes on main branch
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
jobs:

  backend-tests-analysis:
    name: Run backend tests and quality analysis
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_S3_REGION: ${{ vars.AWS_S3_REGION_INTEGRATION }}
      AWS_S3_BUCKET_NAME: ${{ vars.AWS_S3_BUCKET_NAME_INTEGRATION }}
      GOOGLE_RECAPTCHA_PRIVATE_KEY: ${{ secrets.GOOGLE_RECAPTCHA_PRIVATE_KEY_INTEGRATION }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY_INTEGRATION }}
      MAIL_HOST: ${{ vars.MAIL_HOST_INTEGRATION }}
      MAIL_PORT: ${{ vars.MAIL_PORT_INTEGRATION }}
      MAIL_SMTP_AUTH: ${{ vars.MAIL_AUTH_INTEGRATION }}
      MAIL_SMTP_STARTTLS: ${{ vars.MAIL_STARTTLS_INTEGRATION }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME_INTEGRATION }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD_INTEGRATION }}
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run tests and generate coverage report
        id: run-backend-tests
        run: mvn clean verify -Pintegration
        # this step could fail because of coverage requirements
        # but some other steps should run anyway
        continue-on-error: true

      # if jacoco coverage report doesn't exist, something bad happened, and we can't go further
      - name: Verify coverage report existence and stop if missing
        run: |
          if [ ! -f "./core/target/site/jacoco-merged/jacoco.xml" ]; then          
           echo "Error: File 'backend/core/target/site/jacoco-merged/jacoco.xml' not found. Job failed."
           exit 1
          fi
          if [ ! -f "./infrastructure/target/site/jacoco-merged/jacoco.xml" ]; then          
           echo "Error: File 'backend/infrastructure/target/site/jacoco-merged/jacoco.xml' not found. Job failed."
           exit 1
          fi
        shell: bash

      - name: Upload backend core coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-core-coverage
          path: ./backend/core/target/site/jacoco-merged
          retention-days: 7

      - name: Upload backend infra coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-infra-coverage
          path: ./backend/infrastructure/target/site/jacoco-merged
          retention-days: 7

      # we only update pages if code has actually been pushed to main branch, or if workflow is run manually
      # because we want coverage reports in pages to reflect the actual main branch coverage state
      - name: Publish backend coverage report to Github Pages
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./backend/infrastructure/target/site/jacoco-merged
          destination_dir: ./coverage-backend

      # we only update codecov if code has actually been pushed to main branch, or if workflow is run manually
      # because codecov is only used to show actual main branch coverage with a bagde in project READM
      - name: Upload backend coverage report to Codecov
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: backend

      # Run SonarQube analysis on push or manual run
      - name: SonarQube Scan on push or manual run
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        # it may be interesting to prevent SonarQube from running if previous requirements have not been met
        # if: steps.run-tests.outcome == 'success'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
        with: 
          projectBaseDir: backend
          args: >
           -X \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=wilzwert \
            -Dsonar.projectKey=MyJobs_backend \
            -Dproject.settings=./sonar-project-backend.properties

      # Run SonarQube analysis on pull request
      - name: SonarQube Scan on pull request
        if: ${{ github.event_name == 'pull_request' }}
        # it may be interesting to prevent SonarQube from running if previous requirements have not been met
        # if: steps.run-tests.outcome == 'success'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
        with: 
          projectBaseDir: backend
          args: >
             -X \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.organization=wilzwert \
              -Dsonar.projectKey=MyJobs_backend \
              -Dproject.settings=.sonar-project-backend.properties \
              -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
              -Dsonar.pullrequest.branch=${{ github.head_ref }} \
              -Dsonar.pullrequest.base=${{ github.base_ref }}


      - name: Debug files and dirs
        run: |
          echo "Current dir"
          pwd

          echo "in .scannerwork"
          ls -al .scannerwork

      - name: SonarQube Quality Gate Check
        id: quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: backend/.scannerwork/report-task.txt
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
        continue-on-error: true

      # fail job if coverage requirements not met
      # this allows to explicitly specify what went wrong, as we used continue-on-error previously
      - name: Check requirements
        if: ${{ steps.run-backend-tests.outcome == 'failure' || steps.quality-gate.outcome == 'failure'}}
        run: |
          echo "Job failed :"
          if [ "${{ steps.run-backend-tests.outcome }}" == "failure" ]; then
            echo "Coverage checks have not been met. See step 'Run tests and generate coverage report' output, and coverage report"
          fi
          if [ "${{ steps.quality-gate.outcome }}" == "failure" ]; then
            echo "Code quality gate check failed. See step 'SonarQube Quality Gate Check'"
          fi
          exit 1
      - name: Notify completion
        if: ${{ success() }}
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.everest-preview+json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"ready-for-staging"}'