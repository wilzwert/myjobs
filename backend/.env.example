## SERVER
# optional, defaults to http, used only to generate URLs for uploaded files
SERVER_PROTOCOL=http
# optional, defaults to localhost, used only to generate URLs for uploaded files
SERVER_HOST=localhost
# optional, defaults to 8080 ; used to configure to which port the app binds to, and in URL generation
SERVER_PORT=8080

## Logging
# LOG_LEVEL_ROOT defaults to INFO
LOG_LEVEL_ROOT=INFO
# All other log levels default to WARN
LOG_LEVEL_STORAGE=WARN
LOG_LEVEL_AWS=WARN
LOG_LEVEL_DB=WARN
LOG_LEVEL_MAIL=WARN
LOG_LEVEL_CAPTCHA=WARN
LOG_LEVEL_BATCH=WARN
LOG_LEVEL_SECURITY=WARN

## MongoDB
MONGODB_HOST=localhost
MONGODB_PORT:27017
MONGODB_DATABASE=myjobs
MONGODB_USERNAME=mongouser
MONGODB_RS_NAME=rs0
MONGODB_PASSWORD=mongopwd

## JWT
# secret key is mandatory
JWT_SECRET_KEY=your-long-enough-jwt-secret-key
JWT_EXPIRATION_TIME=600
JWT_REFRESH_EXPIRATION_TIME=2592000

## API documentation
# TODO
# optional, defaults to /v3/api-docs
SPRINGDOC_API_DOCS_PATH=/openapi
SWAGGER_PATH=/api-doc

## Emails
MAIL_HOST=localhost
MAIL_PORT=25
MAIL_USERNAME=smtpuser
MAIL_PASSWORD=smtppwd
MAIL_SMTP_STARTTLS=false
MAIL_DEBUG=false
APPLICATION_MAIL_FROM=app@mail.myjobs.wilzwert.com
APPLICATION_MAIL_FROM_NAME=MyJobs

## Google reCaptcha V3
GOOGLE_RECAPTCHA_SITE_KEY=your-recaptcha-site-key
GOOGLE_RECAPTCHA_API_KEY=you-recaptcha-api-key
# set to true to bypass captcha validation
GOOGLE_RECAPTCHA_ALWAYS_VALID=false

## AWS
AWS_ACCESS_KEY_ID=your-aws-access-key-id
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key
AWS_S3_REGION=eu-west-3
AWS_S3_BUCKET_NAME=myjobs-upload

## KAFKA
# Configures Kafka to be used for sending domain's IntegrationEvent

# Default configuration
# In local dev, if you're using the provided default kafka docker config (see /docker/dev/docker-compose.yml),
# you don't need to include these variables in your .env because default properties set in application.yml should work
# out of the box?
# In production or CI/CD contexts using 'staging' profile, you should provide KAFKA_* with environment variables / secrets and
# should not use a .env file
KAFKA_BOOTSTRAP_SERVERS=localhost:9092
KAFKA_SECURITY_PROTOCOL=PLAINTEXT
KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=""
KAFKA_SASL_MECHANISM=
KAFKA_SASL_JAAS_CONFIG=

# In integration testing, the project should be tested with a "real" distant kafka (preferably SASL_SSL)
# Testcontainers is not used for that in this project, mainly because we want to test a real connection to
# the "real world", ideally with a Kafka instance as similar as possible as the production one
# Topics names will be prefixed with [profile]- which means that we can also the exact same Kafka instance
# As there is no easy way (that I know of) to share integration-specific env vars between IDEs, maven goals
# and command line scripts (such as the provided ./sonar.bat) without messing with .env / environment vars / profiles,
# we have another set of variables applied only in 'integration' profile (i.e 'verify'+ maven goal),
# and used in application-integration.yml
# In CI/CD contexts using the 'integration' profile,
# the INTEGRATION_KAFKA_* variables should be set using Github / Gitlab / whatever env variables / secrets
# In other CI/DC contexts (e.g 'staging' profile), KAFKA_* variables should be set (see above)
INTEGRATION_KAFKA_BOOTSTRAP_SERVERS=localhost:9092
INTEGRATION_KAFKA_SECURITY_PROTOCOL=SASL_SSL
INTEGRATION_KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=https
INTEGRATION_KAFKA_SASL_MECHANISM=SCRAM-SHA-256
INTEGRATION_KAFKA_SASL_JAAS_CONFIG=org.apache.kafka.common.security.scram.ScramLoginModule required username="your-username" password="your-password";


## Sonar
# to manually run sonar analysis while developing
# "DEV" : by convention a local or self managed sonar instance
DEV_SONAR_HOST_URL=http://localhost:9000
DEV_SONAR_TOKEN=your-sonar-token
DEV_SONAR_PROJECT_KEY=MyJobs_backend
DEV_SONAR_PROJECT_NAME=MyJobs_backend
DEV_SONAR_SUPPORTS_BRANCH=false

# the "real" sonar
SONAR_TOKEN=your-sonar-token
SONAR_PROJECT_KEY=MyJobs_backend
SONAR_PROJECT_NAME=MyJobs_backend
SONAR_SUPPORTS_BRANCH=true

# enable / disable @Async
# useful e.g. for Cloud Run, which is not compatible with async
# defaults to true if not set in env
ASYNC_ENABLED=true

# enable / disable @EnableBatchProcessing
# useful e.g. for Cloud Run, which is not compatible with batches
# defaults to true if not set in env
BATCH_ENABLED=false

# internal secret to use to authorize http requests to internal endpoints
# this should be passed as a header by callers (i.e. external schedulers)
INTERNAL_SECRET=secret