server:
  port:8080
spring:
  profiles:
    active: dev
  application:
    name: MyJobsInfra
  batch:
    jdbc:
      initialize-schema: always
  mail:
    host: ${MAIL_HOST:localhost}
    port: ${MAIL_PORT:25}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mime:
        charset: UTF-8
      mail:
        debug: ${MAIL_DEBUG:false}
        smtp:
          auth: ${MAIL_SMTP_AUTH:false}
          starttls:
            enable: ${MAIL_SMTP_STARTTLS:false}
            require: ${MAIL_SMTP_STARTTLS:false}
    # test-connection: true
  data:
    mongodb:
      auto-index-creation: true
      uuid-representation: standard
      ssl:
        enabled: false
      uri: mongodb://${MONGODB_USERNAME:mongouser}:${MONGODB_PASSWORD:mongopwd}@${MONGODB_HOST:localhost}:${MONGODB_PORT:27017}/${MONGODB_DATABASE:myjobs}?retryWrites=true&w=majority
  thymeleaf:
    encoding: UTF-8
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
    properties:
      security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
      ssl.endpoint.identification.algorithm: ${KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM:""}
      sasl.mechanism: ${KAFKA_SASL_MECHANISM:}
      sasl.jaas.config: >
        ${KAFKA_SASL_JAAS_CONFIG:}
    admin.auto-create: true
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      linger-ms: 5
      enable-idempotence: true
    template:
      default-topic: myjobs


# security
security:
  jwt:
    secret-key: ${JWT_SECRET_KEY}
    expiration-time: ${JWT_EXPIRATION_TIME:600}
    refresh-expiration-time: ${JWT_REFRESH_EXPIRATION_TIME:2592000}
  cookie:
    secure: false
    same-site: Strict
    domain: ${COOKIE_DOMAIN:localhost}
    path: /
  cors:
    allow-all: false

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    javax.mail: ${LOG_LEVEL_MAIL:WARN}
    org.springframework.batch: ${LOG_LEVEL_BATCH:WARN}
    org.springframework.data.mongodb: ${LOG_LEVEL_DB:WARN}
    org.springframework.transaction: ${LOG_LEVEL_DB:WARN}
    org.springframework.core.task: ${LOG_LEVEL_BATCH:WARN}
    org.springframework.security: ${LOG_LEVEL_SECURITY:WARN}
    org.springframework.mail: ${LOG_LEVEL_MAIL:WARN}

    software.amazon.awssdk: ${LOG_LEVEL_AWS:WARN}

    com.wilzwert.myjobs.infrastructure.security: ${LOG_LEVEL_SECURITY:WARN}
    com.wilzwert.myjobs.infrastructure.batch: ${LOG_LEVEL_BATCH:WARN}
    com.wilzwert.myjobs.infrastructure.security.captcha: ${LOG_LEVEL_CAPTCHA:WARN}
    com.wilzwert.myjobs.infrastructure.adapter.message: ${LOG_LEVEL_MAIL:WARN}
    com.wilzwert.myjobs.infrastructure.storage: ${LOG_LEVEL_STORAGE:WARN}


google:
  recaptcha:
    # use of v3 enterprise mandatory
    site-key: ${GOOGLE_RECAPTCHA_SITE_KEY:siteKey}
    api-key: ${GOOGLE_RECAPTCHA_API_KEY:apikey}
    always-valid: ${GOOGLE_RECAPTCHA_ALWAYS_VALID:true}

aws:
  s3:
    bucket-name: ${AWS_S3_BUCKET_NAME}
    region: ${AWS_S3_REGION}
    access-key-id: ${AWS_ACCESS_KEY_ID}
    secret-access-key: ${AWS_SECRET_ACCESS_KEY}

application:
  internal:
    secret: ${INTERNAL_SECRET:secret}
  async:
    enabled: ${ASYNC_ENABLED:true}
  batch:
    enabled: ${BATCH_ENABLED:true}
  backend:
    url: ${BACKEND_URL:http://localhost:8080}
  frontend:
    url: ${FRONTEND_URL:http://localhost:4200}
  mail:
    from: ${APPLICATION_MAIL_FROM:noreply@locahost}
    from-name: ${APPLICATION_MAIL_FROM_NAME:MyJobs}
  kafka.topic-prefix: myjobs-
  default-language: EN
  rate-limiting:
    rules:
      - path: /api
        scope: anonymous
        limit: 20
        duration: 60s
      - path: /api
        scope: authenticated
        limit: 50
        duration: 60s
      - path: /api/auth/email-check
        scope: anonymous
        limit: 5
        duration: 60s
      - path: /api/auth/email-check
        scope: authenticated
        limit: 20
        duration: 60s

